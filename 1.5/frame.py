#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Apr 15 16:00:26 2011 by generateDS.py version 2.4c.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
STRING_CLEANUP_PAT = re_.compile(r"[\n\r\s]+")

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class frame(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cDate=None, cBy=None, ID=None, name=None, definition=None, semType=None, FE=None, FEcoreSet=None, frameRelation=None, lexUnit=None):
        self.cDate = _cast(None, cDate)
        self.cBy = _cast(None, cBy)
        self.ID = _cast(None, ID)
        self.name = _cast(None, name)
        self.definition = definition
        if semType is None:
            self.semType = []
        else:
            self.semType = semType
        if FE is None:
            self.FE = []
        else:
            self.FE = FE
        if FEcoreSet is None:
            self.FEcoreSet = []
        else:
            self.FEcoreSet = FEcoreSet
        if frameRelation is None:
            self.frameRelation = []
        else:
            self.frameRelation = frameRelation
        if lexUnit is None:
            self.lexUnit = []
        else:
            self.lexUnit = lexUnit
    def factory(*args_, **kwargs_):
        if frame.subclass:
            return frame.subclass(*args_, **kwargs_)
        else:
            return frame(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_definition(self): return self.definition
    def set_definition(self, definition): self.definition = definition
    def get_semType(self): return self.semType
    def set_semType(self, semType): self.semType = semType
    def add_semType(self, value): self.semType.append(value)
    def insert_semType(self, index, value): self.semType[index] = value
    def get_FE(self): return self.FE
    def set_FE(self, FE): self.FE = FE
    def add_FE(self, value): self.FE.append(value)
    def insert_FE(self, index, value): self.FE[index] = value
    def get_FEcoreSet(self): return self.FEcoreSet
    def set_FEcoreSet(self, FEcoreSet): self.FEcoreSet = FEcoreSet
    def add_FEcoreSet(self, value): self.FEcoreSet.append(value)
    def insert_FEcoreSet(self, index, value): self.FEcoreSet[index] = value
    def get_frameRelation(self): return self.frameRelation
    def set_frameRelation(self, frameRelation): self.frameRelation = frameRelation
    def add_frameRelation(self, value): self.frameRelation.append(value)
    def insert_frameRelation(self, index, value): self.frameRelation[index] = value
    def get_lexUnit(self): return self.lexUnit
    def set_lexUnit(self, lexUnit): self.lexUnit = lexUnit
    def add_lexUnit(self, value): self.lexUnit.append(value)
    def insert_lexUnit(self, index, value): self.lexUnit[index] = value
    def get_cDate(self): return self.cDate
    def set_cDate(self, cDate): self.cDate = cDate
    def get_cBy(self): return self.cBy
    def set_cBy(self, cBy): self.cBy = cBy
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='fn:', name_='frame', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='frame')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='frame'):
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            outfile.write(' cDate=%s' % (quote_attrib(self.cDate), ))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            outfile.write(' cBy=%s' % (self.gds_format_string(quote_attrib(self.cBy).encode(ExternalEncoding), input_name='cBy'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='frame', fromsubclass_=False):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('<%sdefinition>%s</%sdefinition>\n' % (namespace_, self.gds_format_string(quote_xml(self.definition).encode(ExternalEncoding), input_name='definition'), namespace_))
        for semType_ in self.semType:
            semType_.export(outfile, level, namespace_, name_='semType')
        for FE_ in self.FE:
            FE_.export(outfile, level, namespace_, name_='FE')
        for FEcoreSet_ in self.FEcoreSet:
            FEcoreSet_.export(outfile, level, namespace_, name_='FEcoreSet')
        for frameRelation_ in self.frameRelation:
            frameRelation_.export(outfile, level, namespace_, name_='frameRelation')
        for lexUnit_ in self.lexUnit:
            lexUnit_.export(outfile, level, namespace_, name_='lexUnit')
    def hasContent_(self):
        if (
            self.definition is not None or
            self.semType or
            self.FE or
            self.FEcoreSet or
            self.frameRelation or
            self.lexUnit
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='frame'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            showIndent(outfile, level)
            outfile.write('cDate = %s,\n' % (self.cDate,))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            showIndent(outfile, level)
            outfile.write('cBy = "%s",\n' % (self.cBy,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('definition=%s,\n' % quote_python(self.definition).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('semType=[\n')
        level += 1
        for semType_ in self.semType:
            showIndent(outfile, level)
            outfile.write('model_.semTypeRefType(\n')
            semType_.exportLiteral(outfile, level, name_='semTypeRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FE=[\n')
        level += 1
        for FE_ in self.FE:
            showIndent(outfile, level)
            outfile.write('model_.FEType(\n')
            FE_.exportLiteral(outfile, level, name_='FEType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FEcoreSet=[\n')
        level += 1
        for FEcoreSet_ in self.FEcoreSet:
            showIndent(outfile, level)
            outfile.write('model_.FEcoreSet(\n')
            FEcoreSet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('frameRelation=[\n')
        level += 1
        for frameRelation_ in self.frameRelation:
            showIndent(outfile, level)
            outfile.write('model_.relatedFramesType(\n')
            frameRelation_.exportLiteral(outfile, level, name_='relatedFramesType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('lexUnit=[\n')
        level += 1
        for lexUnit_ in self.lexUnit:
            showIndent(outfile, level)
            outfile.write('model_.frameLUType(\n')
            lexUnit_.exportLiteral(outfile, level, name_='frameLUType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('cDate')
        if value is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            self.cDate = value
        value = attrs.get('cBy')
        if value is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            self.cBy = value
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'definition':
            definition_ = child_.text
            definition_ = self.gds_validate_string(definition_, node, 'definition')
            self.definition = definition_
        elif nodeName_ == 'semType': 
            obj_ = semTypeRefType.factory()
            obj_.build(child_)
            self.semType.append(obj_)
        elif nodeName_ == 'FE': 
            obj_ = FEType.factory()
            obj_.build(child_)
            self.FE.append(obj_)
        elif nodeName_ == 'FEcoreSet': 
            obj_ = FEcoreSet.factory()
            obj_.build(child_)
            self.FEcoreSet.append(obj_)
        elif nodeName_ == 'frameRelation': 
            obj_ = relatedFramesType.factory()
            obj_.build(child_)
            self.frameRelation.append(obj_)
        elif nodeName_ == 'lexUnit': 
            obj_ = frameLUType.factory()
            obj_.build(child_)
            self.lexUnit.append(obj_)
# end class frame


class FEcoreSet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, memberFE=None):
        if memberFE is None:
            self.memberFE = []
        else:
            self.memberFE = memberFE
    def factory(*args_, **kwargs_):
        if FEcoreSet.subclass:
            return FEcoreSet.subclass(*args_, **kwargs_)
        else:
            return FEcoreSet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_memberFE(self): return self.memberFE
    def set_memberFE(self, memberFE): self.memberFE = memberFE
    def add_memberFE(self, value): self.memberFE.append(value)
    def insert_memberFE(self, index, value): self.memberFE[index] = value
    def export(self, outfile, level, namespace_='fn:', name_='FEcoreSet', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='FEcoreSet')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='FEcoreSet'):
        pass
    def exportChildren(self, outfile, level, namespace_='fn:', name_='FEcoreSet', fromsubclass_=False):
        for memberFE_ in self.memberFE:
            memberFE_.export(outfile, level, namespace_, name_='memberFE')
    def hasContent_(self):
        if (
            self.memberFE
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FEcoreSet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('memberFE=[\n')
        level += 1
        for memberFE_ in self.memberFE:
            showIndent(outfile, level)
            outfile.write('model_.internalFrameRelationFEType(\n')
            memberFE_.exportLiteral(outfile, level, name_='internalFrameRelationFEType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'memberFE': 
            obj_ = internalFrameRelationFEType.factory()
            obj_.build(child_)
            self.memberFE.append(obj_)
# end class FEcoreSet


class FEType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, abbrev=None, fgColor=None, bgColor=None, cDate=None, coreType=None, cBy=None, ID=None, definition=None, semType=None, requiresFE=None, excludesFE=None):
        self.name = _cast(None, name)
        self.abbrev = _cast(None, abbrev)
        self.fgColor = _cast(None, fgColor)
        self.bgColor = _cast(None, bgColor)
        self.cDate = _cast(None, cDate)
        self.coreType = _cast(None, coreType)
        self.cBy = _cast(None, cBy)
        self.ID = _cast(None, ID)
        self.definition = definition
        if semType is None:
            self.semType = []
        else:
            self.semType = semType
        if requiresFE is None:
            self.requiresFE = []
        else:
            self.requiresFE = requiresFE
        if excludesFE is None:
            self.excludesFE = []
        else:
            self.excludesFE = excludesFE
    def factory(*args_, **kwargs_):
        if FEType.subclass:
            return FEType.subclass(*args_, **kwargs_)
        else:
            return FEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_definition(self): return self.definition
    def set_definition(self, definition): self.definition = definition
    def get_semType(self): return self.semType
    def set_semType(self, semType): self.semType = semType
    def add_semType(self, value): self.semType.append(value)
    def insert_semType(self, index, value): self.semType[index] = value
    def get_requiresFE(self): return self.requiresFE
    def set_requiresFE(self, requiresFE): self.requiresFE = requiresFE
    def add_requiresFE(self, value): self.requiresFE.append(value)
    def insert_requiresFE(self, index, value): self.requiresFE[index] = value
    def get_excludesFE(self): return self.excludesFE
    def set_excludesFE(self, excludesFE): self.excludesFE = excludesFE
    def add_excludesFE(self, value): self.excludesFE.append(value)
    def insert_excludesFE(self, index, value): self.excludesFE[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_abbrev(self): return self.abbrev
    def set_abbrev(self, abbrev): self.abbrev = abbrev
    def get_fgColor(self): return self.fgColor
    def set_fgColor(self, fgColor): self.fgColor = fgColor
    def get_bgColor(self): return self.bgColor
    def set_bgColor(self, bgColor): self.bgColor = bgColor
    def get_cDate(self): return self.cDate
    def set_cDate(self, cDate): self.cDate = cDate
    def get_coreType(self): return self.coreType
    def set_coreType(self, coreType): self.coreType = coreType
    def get_cBy(self): return self.cBy
    def set_cBy(self, cBy): self.cBy = cBy
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def export(self, outfile, level, namespace_='fn:', name_='FEType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='FEType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='FEType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.abbrev is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            outfile.write(' abbrev=%s' % (self.gds_format_string(quote_attrib(self.abbrev).encode(ExternalEncoding), input_name='abbrev'), ))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            outfile.write(' fgColor=%s' % (quote_attrib(self.fgColor), ))
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            outfile.write(' bgColor=%s' % (quote_attrib(self.bgColor), ))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            outfile.write(' cDate=%s' % (quote_attrib(self.cDate), ))
        if self.coreType is not None and 'coreType' not in already_processed:
            already_processed.append('coreType')
            outfile.write(' coreType=%s' % (quote_attrib(self.coreType), ))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            outfile.write(' cBy=%s' % (self.gds_format_string(quote_attrib(self.cBy).encode(ExternalEncoding), input_name='cBy'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='FEType', fromsubclass_=False):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('<%sdefinition>%s</%sdefinition>\n' % (namespace_, self.gds_format_string(quote_xml(self.definition).encode(ExternalEncoding), input_name='definition'), namespace_))
        for semType_ in self.semType:
            semType_.export(outfile, level, namespace_, name_='semType')
        for requiresFE_ in self.requiresFE:
            requiresFE_.export(outfile, level, namespace_, name_='requiresFE')
        for excludesFE_ in self.excludesFE:
            excludesFE_.export(outfile, level, namespace_, name_='excludesFE')
    def hasContent_(self):
        if (
            self.definition is not None or
            self.semType or
            self.requiresFE or
            self.excludesFE
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FEType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.abbrev is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            showIndent(outfile, level)
            outfile.write('abbrev = "%s",\n' % (self.abbrev,))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            showIndent(outfile, level)
            outfile.write('fgColor = %s,\n' % (self.fgColor,))
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            showIndent(outfile, level)
            outfile.write('bgColor = %s,\n' % (self.bgColor,))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            showIndent(outfile, level)
            outfile.write('cDate = %s,\n' % (self.cDate,))
        if self.coreType is not None and 'coreType' not in already_processed:
            already_processed.append('coreType')
            showIndent(outfile, level)
            outfile.write('coreType = %s,\n' % (self.coreType,))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            showIndent(outfile, level)
            outfile.write('cBy = "%s",\n' % (self.cBy,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('definition=%s,\n' % quote_python(self.definition).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('semType=[\n')
        level += 1
        for semType_ in self.semType:
            showIndent(outfile, level)
            outfile.write('model_.semTypeRefType(\n')
            semType_.exportLiteral(outfile, level, name_='semTypeRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('requiresFE=[\n')
        level += 1
        for requiresFE_ in self.requiresFE:
            showIndent(outfile, level)
            outfile.write('model_.internalFrameRelationFEType(\n')
            requiresFE_.exportLiteral(outfile, level, name_='internalFrameRelationFEType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('excludesFE=[\n')
        level += 1
        for excludesFE_ in self.excludesFE:
            showIndent(outfile, level)
            outfile.write('model_.internalFrameRelationFEType(\n')
            excludesFE_.exportLiteral(outfile, level, name_='internalFrameRelationFEType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('abbrev')
        if value is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            self.abbrev = value
        value = attrs.get('fgColor')
        if value is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            self.fgColor = value
        value = attrs.get('bgColor')
        if value is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            self.bgColor = value
        value = attrs.get('cDate')
        if value is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            self.cDate = value
        value = attrs.get('coreType')
        if value is not None and 'coreType' not in already_processed:
            already_processed.append('coreType')
            self.coreType = value
        value = attrs.get('cBy')
        if value is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            self.cBy = value
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'definition':
            definition_ = child_.text
            definition_ = self.gds_validate_string(definition_, node, 'definition')
            self.definition = definition_
        elif nodeName_ == 'semType': 
            obj_ = semTypeRefType.factory()
            obj_.build(child_)
            self.semType.append(obj_)
        elif nodeName_ == 'requiresFE': 
            obj_ = internalFrameRelationFEType.factory()
            obj_.build(child_)
            self.requiresFE.append(obj_)
        elif nodeName_ == 'excludesFE': 
            obj_ = internalFrameRelationFEType.factory()
            obj_.build(child_)
            self.excludesFE.append(obj_)
# end class FEType


class internalFrameRelationFEType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, name=None, valueOf_=None):
        self.ID = _cast(int, ID)
        self.name = _cast(None, name)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if internalFrameRelationFEType.subclass:
            return internalFrameRelationFEType.subclass(*args_, **kwargs_)
        else:
            return internalFrameRelationFEType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='internalFrameRelationFEType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='internalFrameRelationFEType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='internalFrameRelationFEType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID="%s"' % self.gds_format_integer(self.ID, input_name='ID'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='internalFrameRelationFEType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='internalFrameRelationFEType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %d,\n' % (self.ID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            try:
                self.ID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class internalFrameRelationFEType


class relatedFramesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, relatedFrame=None):
        self.type_ = _cast(None, type_)
        if relatedFrame is None:
            self.relatedFrame = []
        else:
            self.relatedFrame = relatedFrame
    def factory(*args_, **kwargs_):
        if relatedFramesType.subclass:
            return relatedFramesType.subclass(*args_, **kwargs_)
        else:
            return relatedFramesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_relatedFrame(self): return self.relatedFrame
    def set_relatedFrame(self, relatedFrame): self.relatedFrame = relatedFrame
    def add_relatedFrame(self, value): self.relatedFrame.append(value)
    def insert_relatedFrame(self, index, value): self.relatedFrame[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def export(self, outfile, level, namespace_='fn:', name_='relatedFramesType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='relatedFramesType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='relatedFramesType'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='relatedFramesType', fromsubclass_=False):
        for relatedFrame_ in self.relatedFrame:
            showIndent(outfile, level)
            outfile.write('<%srelatedFrame>%s</%srelatedFrame>\n' % (namespace_, self.gds_format_string(quote_xml(relatedFrame_).encode(ExternalEncoding), input_name='relatedFrame'), namespace_))
    def hasContent_(self):
        if (
            self.relatedFrame
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='relatedFramesType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('relatedFrame=[\n')
        level += 1
        for relatedFrame_ in self.relatedFrame:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(relatedFrame_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('type')
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'relatedFrame':
            relatedFrame_ = child_.text
            relatedFrame_ = self.gds_validate_string(relatedFrame_, node, 'relatedFrame')
            self.relatedFrame.append(relatedFrame_)
# end class relatedFramesType


class frameLUType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, status=None, name=None, POS=None, cDate=None, incorporatedFE=None, cBy=None, lemmaID=None, ID=None, definition=None, sentenceCount=None, lexeme=None, semType=None):
        self.status = _cast(None, status)
        self.name = _cast(None, name)
        self.POS = _cast(None, POS)
        self.cDate = _cast(None, cDate)
        self.incorporatedFE = _cast(None, incorporatedFE)
        self.cBy = _cast(None, cBy)
        self.lemmaID = _cast(None, lemmaID)
        self.ID = _cast(None, ID)
        self.definition = definition
        self.sentenceCount = sentenceCount
        if lexeme is None:
            self.lexeme = []
        else:
            self.lexeme = lexeme
        if semType is None:
            self.semType = []
        else:
            self.semType = semType
    def factory(*args_, **kwargs_):
        if frameLUType.subclass:
            return frameLUType.subclass(*args_, **kwargs_)
        else:
            return frameLUType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_definition(self): return self.definition
    def set_definition(self, definition): self.definition = definition
    def get_sentenceCount(self): return self.sentenceCount
    def set_sentenceCount(self, sentenceCount): self.sentenceCount = sentenceCount
    def get_lexeme(self): return self.lexeme
    def set_lexeme(self, lexeme): self.lexeme = lexeme
    def add_lexeme(self, value): self.lexeme.append(value)
    def insert_lexeme(self, index, value): self.lexeme[index] = value
    def get_semType(self): return self.semType
    def set_semType(self, semType): self.semType = semType
    def add_semType(self, value): self.semType.append(value)
    def insert_semType(self, index, value): self.semType[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_POS(self): return self.POS
    def set_POS(self, POS): self.POS = POS
    def get_cDate(self): return self.cDate
    def set_cDate(self, cDate): self.cDate = cDate
    def get_incorporatedFE(self): return self.incorporatedFE
    def set_incorporatedFE(self, incorporatedFE): self.incorporatedFE = incorporatedFE
    def get_cBy(self): return self.cBy
    def set_cBy(self, cBy): self.cBy = cBy
    def get_lemmaID(self): return self.lemmaID
    def set_lemmaID(self, lemmaID): self.lemmaID = lemmaID
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def export(self, outfile, level, namespace_='fn:', name_='frameLUType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='frameLUType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='frameLUType'):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (self.gds_format_string(quote_attrib(self.status).encode(ExternalEncoding), input_name='status'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            outfile.write(' POS=%s' % (quote_attrib(self.POS), ))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            outfile.write(' cDate=%s' % (quote_attrib(self.cDate), ))
        if self.incorporatedFE is not None and 'incorporatedFE' not in already_processed:
            already_processed.append('incorporatedFE')
            outfile.write(' incorporatedFE=%s' % (self.gds_format_string(quote_attrib(self.incorporatedFE).encode(ExternalEncoding), input_name='incorporatedFE'), ))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            outfile.write(' cBy=%s' % (self.gds_format_string(quote_attrib(self.cBy).encode(ExternalEncoding), input_name='cBy'), ))
        if self.lemmaID is not None and 'lemmaID' not in already_processed:
            already_processed.append('lemmaID')
            outfile.write(' lemmaID=%s' % (quote_attrib(self.lemmaID), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='frameLUType', fromsubclass_=False):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('<%sdefinition>%s</%sdefinition>\n' % (namespace_, self.gds_format_string(quote_xml(self.definition).encode(ExternalEncoding), input_name='definition'), namespace_))
        if self.sentenceCount:
            self.sentenceCount.export(outfile, level, namespace_, name_='sentenceCount', )
        for lexeme_ in self.lexeme:
            lexeme_.export(outfile, level, namespace_, name_='lexeme')
        for semType_ in self.semType:
            semType_.export(outfile, level, namespace_, name_='semType')
    def hasContent_(self):
        if (
            self.definition is not None or
            self.sentenceCount is not None or
            self.lexeme or
            self.semType
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='frameLUType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = "%s",\n' % (self.status,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            showIndent(outfile, level)
            outfile.write('POS = %s,\n' % (self.POS,))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            showIndent(outfile, level)
            outfile.write('cDate = %s,\n' % (self.cDate,))
        if self.incorporatedFE is not None and 'incorporatedFE' not in already_processed:
            already_processed.append('incorporatedFE')
            showIndent(outfile, level)
            outfile.write('incorporatedFE = "%s",\n' % (self.incorporatedFE,))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            showIndent(outfile, level)
            outfile.write('cBy = "%s",\n' % (self.cBy,))
        if self.lemmaID is not None and 'lemmaID' not in already_processed:
            already_processed.append('lemmaID')
            showIndent(outfile, level)
            outfile.write('lemmaID = %s,\n' % (self.lemmaID,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('definition=%s,\n' % quote_python(self.definition).encode(ExternalEncoding))
        if self.sentenceCount is not None:
            showIndent(outfile, level)
            outfile.write('sentenceCount=model_.sentenceCount(\n')
            self.sentenceCount.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('lexeme=[\n')
        level += 1
        for lexeme_ in self.lexeme:
            showIndent(outfile, level)
            outfile.write('model_.lexemeType(\n')
            lexeme_.exportLiteral(outfile, level, name_='lexemeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('semType=[\n')
        level += 1
        for semType_ in self.semType:
            showIndent(outfile, level)
            outfile.write('model_.semTypeRefType(\n')
            semType_.exportLiteral(outfile, level, name_='semTypeRefType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('status')
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('POS')
        if value is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            self.POS = value
        value = attrs.get('cDate')
        if value is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            self.cDate = value
        value = attrs.get('incorporatedFE')
        if value is not None and 'incorporatedFE' not in already_processed:
            already_processed.append('incorporatedFE')
            self.incorporatedFE = value
        value = attrs.get('cBy')
        if value is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            self.cBy = value
        value = attrs.get('lemmaID')
        if value is not None and 'lemmaID' not in already_processed:
            already_processed.append('lemmaID')
            self.lemmaID = value
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'definition':
            definition_ = child_.text
            definition_ = self.gds_validate_string(definition_, node, 'definition')
            self.definition = definition_
        elif nodeName_ == 'sentenceCount': 
            obj_ = sentenceCount.factory()
            obj_.build(child_)
            self.set_sentenceCount(obj_)
        elif nodeName_ == 'lexeme': 
            obj_ = lexemeType.factory()
            obj_.build(child_)
            self.lexeme.append(obj_)
        elif nodeName_ == 'semType': 
            obj_ = semTypeRefType.factory()
            obj_.build(child_)
            self.semType.append(obj_)
# end class frameLUType


class sentenceCount(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, total=None, annotated=None, valueOf_=None):
        self.total = _cast(None, total)
        self.annotated = _cast(None, annotated)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if sentenceCount.subclass:
            return sentenceCount.subclass(*args_, **kwargs_)
        else:
            return sentenceCount(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_total(self): return self.total
    def set_total(self, total): self.total = total
    def get_annotated(self): return self.annotated
    def set_annotated(self, annotated): self.annotated = annotated
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='sentenceCount', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='sentenceCount')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='sentenceCount'):
        if self.total is not None and 'total' not in already_processed:
            already_processed.append('total')
            outfile.write(' total=%s' % (quote_attrib(self.total), ))
        if self.annotated is not None and 'annotated' not in already_processed:
            already_processed.append('annotated')
            outfile.write(' annotated=%s' % (quote_attrib(self.annotated), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='sentenceCount', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sentenceCount'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.total is not None and 'total' not in already_processed:
            already_processed.append('total')
            showIndent(outfile, level)
            outfile.write('total = %s,\n' % (self.total,))
        if self.annotated is not None and 'annotated' not in already_processed:
            already_processed.append('annotated')
            showIndent(outfile, level)
            outfile.write('annotated = %s,\n' % (self.annotated,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('total')
        if value is not None and 'total' not in already_processed:
            already_processed.append('total')
            self.total = value
        value = attrs.get('annotated')
        if value is not None and 'annotated' not in already_processed:
            already_processed.append('annotated')
            self.annotated = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sentenceCount


class lexemeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, order=None, headword=None, breakBefore=None, name=None, POS=None, valueOf_=None):
        self.order = _cast(None, order)
        self.headword = _cast(bool, headword)
        self.breakBefore = _cast(bool, breakBefore)
        self.name = _cast(None, name)
        self.POS = _cast(None, POS)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if lexemeType.subclass:
            return lexemeType.subclass(*args_, **kwargs_)
        else:
            return lexemeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_order(self): return self.order
    def set_order(self, order): self.order = order
    def get_headword(self): return self.headword
    def set_headword(self, headword): self.headword = headword
    def get_breakBefore(self): return self.breakBefore
    def set_breakBefore(self, breakBefore): self.breakBefore = breakBefore
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_POS(self): return self.POS
    def set_POS(self, POS): self.POS = POS
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='lexemeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='lexemeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='lexemeType'):
        if self.order is not None and 'order' not in already_processed:
            already_processed.append('order')
            outfile.write(' order=%s' % (quote_attrib(self.order), ))
        if self.headword is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            outfile.write(' headword="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.headword)), input_name='headword'))
        if self.breakBefore is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            outfile.write(' breakBefore="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.breakBefore)), input_name='breakBefore'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            outfile.write(' POS=%s' % (quote_attrib(self.POS), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='lexemeType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='lexemeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.order is not None and 'order' not in already_processed:
            already_processed.append('order')
            showIndent(outfile, level)
            outfile.write('order = %s,\n' % (self.order,))
        if self.headword is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            showIndent(outfile, level)
            outfile.write('headword = %s,\n' % (self.headword,))
        if self.breakBefore is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            showIndent(outfile, level)
            outfile.write('breakBefore = %s,\n' % (self.breakBefore,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            showIndent(outfile, level)
            outfile.write('POS = %s,\n' % (self.POS,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('order')
        if value is not None and 'order' not in already_processed:
            already_processed.append('order')
            self.order = value
        value = attrs.get('headword')
        if value is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            if value in ('true', '1'):
                self.headword = True
            elif value in ('false', '0'):
                self.headword = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = attrs.get('breakBefore')
        if value is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            if value in ('true', '1'):
                self.breakBefore = True
            elif value in ('false', '0'):
                self.breakBefore = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('POS')
        if value is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            self.POS = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class lexemeType


class semTypeRefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, name=None, valueOf_=None):
        self.ID = _cast(None, ID)
        self.name = _cast(None, name)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if semTypeRefType.subclass:
            return semTypeRefType.subclass(*args_, **kwargs_)
        else:
            return semTypeRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='semTypeRefType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='semTypeRefType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='semTypeRefType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='semTypeRefType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='semTypeRefType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class semTypeRefType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'frame'
        rootClass = frame
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'frame'
        rootClass = frame
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="frame",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'frame'
        rootClass = frame
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from frame import *\n\n')
    sys.stdout.write('import frame as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "FEType",
    "FEcoreSet",
    "frame",
    "frameLUType",
    "internalFrameRelationFEType",
    "lexemeType",
    "relatedFramesType",
    "semTypeRefType",
    "sentenceCount"
    ]
