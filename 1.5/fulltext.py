#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Apr 15 16:03:33 2011 by generateDS.py version 2.4c.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
STRING_CLEANUP_PAT = re_.compile(r"[\n\r\s]+")

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class fullTextAnnotation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, header=None, sentence=None):
        self.header = header
        if sentence is None:
            self.sentence = []
        else:
            self.sentence = sentence
    def factory(*args_, **kwargs_):
        if fullTextAnnotation.subclass:
            return fullTextAnnotation.subclass(*args_, **kwargs_)
        else:
            return fullTextAnnotation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_header(self): return self.header
    def set_header(self, header): self.header = header
    def get_sentence(self): return self.sentence
    def set_sentence(self, sentence): self.sentence = sentence
    def add_sentence(self, value): self.sentence.append(value)
    def insert_sentence(self, index, value): self.sentence[index] = value
    def export(self, outfile, level, namespace_='fn:', name_='fullTextAnnotation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='fullTextAnnotation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='fullTextAnnotation'):
        pass
    def exportChildren(self, outfile, level, namespace_='fn:', name_='fullTextAnnotation', fromsubclass_=False):
        if self.header:
            self.header.export(outfile, level, namespace_, name_='header', )
        for sentence_ in self.sentence:
            sentence_.export(outfile, level, namespace_, name_='sentence')
    def hasContent_(self):
        if (
            self.header is not None or
            self.sentence
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='fullTextAnnotation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.header is not None:
            showIndent(outfile, level)
            outfile.write('header=model_.headerType(\n')
            self.header.exportLiteral(outfile, level, name_='header')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('sentence=[\n')
        level += 1
        for sentence_ in self.sentence:
            showIndent(outfile, level)
            outfile.write('model_.sentenceType(\n')
            sentence_.exportLiteral(outfile, level, name_='sentenceType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'header': 
            obj_ = headerType.factory()
            obj_.build(child_)
            self.set_header(obj_)
        elif nodeName_ == 'sentence': 
            obj_ = sentenceType.factory()
            obj_.build(child_)
            self.sentence.append(obj_)
# end class fullTextAnnotation


class headerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, corpus=None, frame=None):
        if corpus is None:
            self.corpus = []
        else:
            self.corpus = corpus
        self.frame = frame
    def factory(*args_, **kwargs_):
        if headerType.subclass:
            return headerType.subclass(*args_, **kwargs_)
        else:
            return headerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_corpus(self): return self.corpus
    def set_corpus(self, corpus): self.corpus = corpus
    def add_corpus(self, value): self.corpus.append(value)
    def insert_corpus(self, index, value): self.corpus[index] = value
    def get_frame(self): return self.frame
    def set_frame(self, frame): self.frame = frame
    def export(self, outfile, level, namespace_='fn:', name_='headerType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='headerType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='headerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='fn:', name_='headerType', fromsubclass_=False):
        for corpus_ in self.corpus:
            corpus_.export(outfile, level, namespace_, name_='corpus')
        if self.frame:
            self.frame.export(outfile, level, namespace_, name_='frame')
    def hasContent_(self):
        if (
            self.corpus or
            self.frame is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='headerType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('corpus=[\n')
        level += 1
        for corpus_ in self.corpus:
            showIndent(outfile, level)
            outfile.write('model_.corpDocType(\n')
            corpus_.exportLiteral(outfile, level, name_='corpDocType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.frame is not None:
            showIndent(outfile, level)
            outfile.write('frame=model_.frame(\n')
            self.frame.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'corpus': 
            obj_ = corpDocType.factory()
            obj_.build(child_)
            self.corpus.append(obj_)
        elif nodeName_ == 'frame': 
            obj_ = frame.factory()
            obj_.build(child_)
            self.set_frame(obj_)
# end class headerType


class frame(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FE=None):
        if FE is None:
            self.FE = []
        else:
            self.FE = FE
    def factory(*args_, **kwargs_):
        if frame.subclass:
            return frame.subclass(*args_, **kwargs_)
        else:
            return frame(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FE(self): return self.FE
    def set_FE(self, FE): self.FE = FE
    def add_FE(self, value): self.FE.append(value)
    def insert_FE(self, index, value): self.FE[index] = value
    def export(self, outfile, level, namespace_='fn:', name_='frame', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='frame')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='frame'):
        pass
    def exportChildren(self, outfile, level, namespace_='fn:', name_='frame', fromsubclass_=False):
        for FE_ in self.FE:
            FE_.export(outfile, level, namespace_, name_='FE')
    def hasContent_(self):
        if (
            self.FE
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='frame'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('FE=[\n')
        level += 1
        for FE_ in self.FE:
            showIndent(outfile, level)
            outfile.write('model_.FE(\n')
            FE_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FE': 
            obj_ = FE.factory()
            obj_.build(child_)
            self.FE.append(obj_)
# end class frame


class FE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bgColor=None, abbrev=None, type_=None, name=None, fgColor=None, valueOf_=None):
        self.bgColor = _cast(None, bgColor)
        self.abbrev = _cast(None, abbrev)
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
        self.fgColor = _cast(None, fgColor)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if FE.subclass:
            return FE.subclass(*args_, **kwargs_)
        else:
            return FE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_bgColor(self): return self.bgColor
    def set_bgColor(self, bgColor): self.bgColor = bgColor
    def get_abbrev(self): return self.abbrev
    def set_abbrev(self, abbrev): self.abbrev = abbrev
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_fgColor(self): return self.fgColor
    def set_fgColor(self, fgColor): self.fgColor = fgColor
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='FE', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='FE')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='FE'):
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            outfile.write(' bgColor=%s' % (quote_attrib(self.bgColor), ))
        if self.abbrev is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            outfile.write(' abbrev=%s' % (self.gds_format_string(quote_attrib(self.abbrev).encode(ExternalEncoding), input_name='abbrev'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            outfile.write(' fgColor=%s' % (quote_attrib(self.fgColor), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='FE', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FE'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            showIndent(outfile, level)
            outfile.write('bgColor = %s,\n' % (self.bgColor,))
        if self.abbrev is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            showIndent(outfile, level)
            outfile.write('abbrev = "%s",\n' % (self.abbrev,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            showIndent(outfile, level)
            outfile.write('fgColor = %s,\n' % (self.fgColor,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('bgColor')
        if value is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            self.bgColor = value
        value = attrs.get('abbrev')
        if value is not None and 'abbrev' not in already_processed:
            already_processed.append('abbrev')
            self.abbrev = value
        value = attrs.get('type')
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('fgColor')
        if value is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            self.fgColor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FE


class corpDocType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, name=None, document=None):
        self.ID = _cast(None, ID)
        self.name = _cast(None, name)
        if document is None:
            self.document = []
        else:
            self.document = document
    def factory(*args_, **kwargs_):
        if corpDocType.subclass:
            return corpDocType.subclass(*args_, **kwargs_)
        else:
            return corpDocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def add_document(self, value): self.document.append(value)
    def insert_document(self, index, value): self.document[index] = value
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def export(self, outfile, level, namespace_='fn:', name_='corpDocType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='corpDocType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='corpDocType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='corpDocType', fromsubclass_=False):
        for document_ in self.document:
            document_.export(outfile, level, namespace_, name_='document')
    def hasContent_(self):
        if (
            self.document
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='corpDocType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('document=[\n')
        level += 1
        for document_ in self.document:
            showIndent(outfile, level)
            outfile.write('model_.document(\n')
            document_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'document': 
            obj_ = document.factory()
            obj_.build(child_)
            self.document.append(obj_)
# end class corpDocType


class document(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, description=None, valueOf_=None):
        self.ID = _cast(None, ID)
        self.description = _cast(None, description)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if document.subclass:
            return document.subclass(*args_, **kwargs_)
        else:
            return document(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='document', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='document')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='document'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.append('description')
            outfile.write(' description=%s' % (self.gds_format_string(quote_attrib(self.description).encode(ExternalEncoding), input_name='description'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='document', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='document'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.description is not None and 'description' not in already_processed:
            already_processed.append('description')
            showIndent(outfile, level)
            outfile.write('description = "%s",\n' % (self.description,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
        value = attrs.get('description')
        if value is not None and 'description' not in already_processed:
            already_processed.append('description')
            self.description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class document


class lexemeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, order=None, headword=None, breakBefore=None, name=None, POS=None, valueOf_=None):
        self.order = _cast(None, order)
        self.headword = _cast(bool, headword)
        self.breakBefore = _cast(bool, breakBefore)
        self.name = _cast(None, name)
        self.POS = _cast(None, POS)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if lexemeType.subclass:
            return lexemeType.subclass(*args_, **kwargs_)
        else:
            return lexemeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_order(self): return self.order
    def set_order(self, order): self.order = order
    def get_headword(self): return self.headword
    def set_headword(self, headword): self.headword = headword
    def get_breakBefore(self): return self.breakBefore
    def set_breakBefore(self, breakBefore): self.breakBefore = breakBefore
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_POS(self): return self.POS
    def set_POS(self, POS): self.POS = POS
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='lexemeType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='lexemeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='lexemeType'):
        if self.order is not None and 'order' not in already_processed:
            already_processed.append('order')
            outfile.write(' order=%s' % (quote_attrib(self.order), ))
        if self.headword is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            outfile.write(' headword="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.headword)), input_name='headword'))
        if self.breakBefore is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            outfile.write(' breakBefore="%s"' % self.gds_format_boolean(self.gds_str_lower(str(self.breakBefore)), input_name='breakBefore'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            outfile.write(' POS=%s' % (quote_attrib(self.POS), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='lexemeType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='lexemeType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.order is not None and 'order' not in already_processed:
            already_processed.append('order')
            showIndent(outfile, level)
            outfile.write('order = %s,\n' % (self.order,))
        if self.headword is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            showIndent(outfile, level)
            outfile.write('headword = %s,\n' % (self.headword,))
        if self.breakBefore is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            showIndent(outfile, level)
            outfile.write('breakBefore = %s,\n' % (self.breakBefore,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.POS is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            showIndent(outfile, level)
            outfile.write('POS = %s,\n' % (self.POS,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('order')
        if value is not None and 'order' not in already_processed:
            already_processed.append('order')
            self.order = value
        value = attrs.get('headword')
        if value is not None and 'headword' not in already_processed:
            already_processed.append('headword')
            if value in ('true', '1'):
                self.headword = True
            elif value in ('false', '0'):
                self.headword = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = attrs.get('breakBefore')
        if value is not None and 'breakBefore' not in already_processed:
            already_processed.append('breakBefore')
            if value in ('true', '1'):
                self.breakBefore = True
            elif value in ('false', '0'):
                self.breakBefore = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('POS')
        if value is not None and 'POS' not in already_processed:
            already_processed.append('POS')
            self.POS = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class lexemeType


class semTypeRefType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ID=None, name=None, valueOf_=None):
        self.ID = _cast(None, ID)
        self.name = _cast(None, name)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if semTypeRefType.subclass:
            return semTypeRefType.subclass(*args_, **kwargs_)
        else:
            return semTypeRefType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='semTypeRefType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='semTypeRefType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='semTypeRefType'):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='semTypeRefType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='semTypeRefType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class semTypeRefType


class sentenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, docID=None, sentNo=None, paragNo=None, aPos=None, corpID=None, ID=None, text=None, annotationSet=None):
        self.docID = _cast(None, docID)
        self.sentNo = _cast(None, sentNo)
        self.paragNo = _cast(None, paragNo)
        self.aPos = _cast(None, aPos)
        self.corpID = _cast(None, corpID)
        self.ID = _cast(None, ID)
        self.text = text
        if annotationSet is None:
            self.annotationSet = []
        else:
            self.annotationSet = annotationSet
    def factory(*args_, **kwargs_):
        if sentenceType.subclass:
            return sentenceType.subclass(*args_, **kwargs_)
        else:
            return sentenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def get_annotationSet(self): return self.annotationSet
    def set_annotationSet(self, annotationSet): self.annotationSet = annotationSet
    def add_annotationSet(self, value): self.annotationSet.append(value)
    def insert_annotationSet(self, index, value): self.annotationSet[index] = value
    def get_docID(self): return self.docID
    def set_docID(self, docID): self.docID = docID
    def get_sentNo(self): return self.sentNo
    def set_sentNo(self, sentNo): self.sentNo = sentNo
    def get_paragNo(self): return self.paragNo
    def set_paragNo(self, paragNo): self.paragNo = paragNo
    def get_aPos(self): return self.aPos
    def set_aPos(self, aPos): self.aPos = aPos
    def get_corpID(self): return self.corpID
    def set_corpID(self, corpID): self.corpID = corpID
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def export(self, outfile, level, namespace_='fn:', name_='sentenceType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='sentenceType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='sentenceType'):
        if self.docID is not None and 'docID' not in already_processed:
            already_processed.append('docID')
            outfile.write(' docID=%s' % (quote_attrib(self.docID), ))
        if self.sentNo is not None and 'sentNo' not in already_processed:
            already_processed.append('sentNo')
            outfile.write(' sentNo=%s' % (quote_attrib(self.sentNo), ))
        if self.paragNo is not None and 'paragNo' not in already_processed:
            already_processed.append('paragNo')
            outfile.write(' paragNo=%s' % (quote_attrib(self.paragNo), ))
        if self.aPos is not None and 'aPos' not in already_processed:
            already_processed.append('aPos')
            outfile.write(' aPos=%s' % (quote_attrib(self.aPos), ))
        if self.corpID is not None and 'corpID' not in already_processed:
            already_processed.append('corpID')
            outfile.write(' corpID=%s' % (quote_attrib(self.corpID), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='sentenceType', fromsubclass_=False):
        if self.text is not None:
            showIndent(outfile, level)
            outfile.write('<%stext>%s</%stext>\n' % (namespace_, self.gds_format_string(quote_xml(self.text).encode(ExternalEncoding), input_name='text'), namespace_))
        for annotationSet_ in self.annotationSet:
            annotationSet_.export(outfile, level, namespace_, name_='annotationSet')
    def hasContent_(self):
        if (
            self.text is not None or
            self.annotationSet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='sentenceType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.docID is not None and 'docID' not in already_processed:
            already_processed.append('docID')
            showIndent(outfile, level)
            outfile.write('docID = %s,\n' % (self.docID,))
        if self.sentNo is not None and 'sentNo' not in already_processed:
            already_processed.append('sentNo')
            showIndent(outfile, level)
            outfile.write('sentNo = %s,\n' % (self.sentNo,))
        if self.paragNo is not None and 'paragNo' not in already_processed:
            already_processed.append('paragNo')
            showIndent(outfile, level)
            outfile.write('paragNo = %s,\n' % (self.paragNo,))
        if self.aPos is not None and 'aPos' not in already_processed:
            already_processed.append('aPos')
            showIndent(outfile, level)
            outfile.write('aPos = %s,\n' % (self.aPos,))
        if self.corpID is not None and 'corpID' not in already_processed:
            already_processed.append('corpID')
            showIndent(outfile, level)
            outfile.write('corpID = %s,\n' % (self.corpID,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.text is not None:
            showIndent(outfile, level)
            outfile.write('text=%s,\n' % quote_python(self.text).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('annotationSet=[\n')
        level += 1
        for annotationSet_ in self.annotationSet:
            showIndent(outfile, level)
            outfile.write('model_.annotationSetType(\n')
            annotationSet_.exportLiteral(outfile, level, name_='annotationSetType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('docID')
        if value is not None and 'docID' not in already_processed:
            already_processed.append('docID')
            self.docID = value
        value = attrs.get('sentNo')
        if value is not None and 'sentNo' not in already_processed:
            already_processed.append('sentNo')
            self.sentNo = value
        value = attrs.get('paragNo')
        if value is not None and 'paragNo' not in already_processed:
            already_processed.append('paragNo')
            self.paragNo = value
        value = attrs.get('aPos')
        if value is not None and 'aPos' not in already_processed:
            already_processed.append('aPos')
            self.aPos = value
        value = attrs.get('corpID')
        if value is not None and 'corpID' not in already_processed:
            already_processed.append('corpID')
            self.corpID = value
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'text':
            text_ = child_.text
            text_ = self.gds_validate_string(text_, node, 'text')
            self.text = text_
        elif nodeName_ == 'annotationSet': 
            obj_ = annotationSetType.factory()
            obj_.build(child_)
            self.annotationSet.append(obj_)
# end class sentenceType


class annotationSetType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, status=None, cxnID=None, luID=None, frameID=None, cDate=None, frameName=None, luName=None, cxnName=None, ID=None, layer=None):
        self.status = _cast(None, status)
        self.cxnID = _cast(None, cxnID)
        self.luID = _cast(None, luID)
        self.frameID = _cast(None, frameID)
        self.cDate = _cast(None, cDate)
        self.frameName = _cast(None, frameName)
        self.luName = _cast(None, luName)
        self.cxnName = _cast(None, cxnName)
        self.ID = _cast(None, ID)
        if layer is None:
            self.layer = []
        else:
            self.layer = layer
    def factory(*args_, **kwargs_):
        if annotationSetType.subclass:
            return annotationSetType.subclass(*args_, **kwargs_)
        else:
            return annotationSetType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_layer(self): return self.layer
    def set_layer(self, layer): self.layer = layer
    def add_layer(self, value): self.layer.append(value)
    def insert_layer(self, index, value): self.layer[index] = value
    def get_status(self): return self.status
    def set_status(self, status): self.status = status
    def get_cxnID(self): return self.cxnID
    def set_cxnID(self, cxnID): self.cxnID = cxnID
    def get_luID(self): return self.luID
    def set_luID(self, luID): self.luID = luID
    def get_frameID(self): return self.frameID
    def set_frameID(self, frameID): self.frameID = frameID
    def get_cDate(self): return self.cDate
    def set_cDate(self, cDate): self.cDate = cDate
    def get_frameName(self): return self.frameName
    def set_frameName(self, frameName): self.frameName = frameName
    def get_luName(self): return self.luName
    def set_luName(self, luName): self.luName = luName
    def get_cxnName(self): return self.cxnName
    def set_cxnName(self, cxnName): self.cxnName = cxnName
    def get_ID(self): return self.ID
    def set_ID(self, ID): self.ID = ID
    def export(self, outfile, level, namespace_='fn:', name_='annotationSetType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='annotationSetType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='annotationSetType'):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            outfile.write(' status=%s' % (self.gds_format_string(quote_attrib(self.status).encode(ExternalEncoding), input_name='status'), ))
        if self.cxnID is not None and 'cxnID' not in already_processed:
            already_processed.append('cxnID')
            outfile.write(' cxnID=%s' % (quote_attrib(self.cxnID), ))
        if self.luID is not None and 'luID' not in already_processed:
            already_processed.append('luID')
            outfile.write(' luID=%s' % (quote_attrib(self.luID), ))
        if self.frameID is not None and 'frameID' not in already_processed:
            already_processed.append('frameID')
            outfile.write(' frameID=%s' % (quote_attrib(self.frameID), ))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            outfile.write(' cDate=%s' % (quote_attrib(self.cDate), ))
        if self.frameName is not None and 'frameName' not in already_processed:
            already_processed.append('frameName')
            outfile.write(' frameName=%s' % (self.gds_format_string(quote_attrib(self.frameName).encode(ExternalEncoding), input_name='frameName'), ))
        if self.luName is not None and 'luName' not in already_processed:
            already_processed.append('luName')
            outfile.write(' luName=%s' % (self.gds_format_string(quote_attrib(self.luName).encode(ExternalEncoding), input_name='luName'), ))
        if self.cxnName is not None and 'cxnName' not in already_processed:
            already_processed.append('cxnName')
            outfile.write(' cxnName=%s' % (self.gds_format_string(quote_attrib(self.cxnName).encode(ExternalEncoding), input_name='cxnName'), ))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            outfile.write(' ID=%s' % (quote_attrib(self.ID), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='annotationSetType', fromsubclass_=False):
        for layer_ in self.layer:
            layer_.export(outfile, level, namespace_, name_='layer')
    def hasContent_(self):
        if (
            self.layer
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='annotationSetType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.status is not None and 'status' not in already_processed:
            already_processed.append('status')
            showIndent(outfile, level)
            outfile.write('status = "%s",\n' % (self.status,))
        if self.cxnID is not None and 'cxnID' not in already_processed:
            already_processed.append('cxnID')
            showIndent(outfile, level)
            outfile.write('cxnID = %s,\n' % (self.cxnID,))
        if self.luID is not None and 'luID' not in already_processed:
            already_processed.append('luID')
            showIndent(outfile, level)
            outfile.write('luID = %s,\n' % (self.luID,))
        if self.frameID is not None and 'frameID' not in already_processed:
            already_processed.append('frameID')
            showIndent(outfile, level)
            outfile.write('frameID = %s,\n' % (self.frameID,))
        if self.cDate is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            showIndent(outfile, level)
            outfile.write('cDate = %s,\n' % (self.cDate,))
        if self.frameName is not None and 'frameName' not in already_processed:
            already_processed.append('frameName')
            showIndent(outfile, level)
            outfile.write('frameName = "%s",\n' % (self.frameName,))
        if self.luName is not None and 'luName' not in already_processed:
            already_processed.append('luName')
            showIndent(outfile, level)
            outfile.write('luName = "%s",\n' % (self.luName,))
        if self.cxnName is not None and 'cxnName' not in already_processed:
            already_processed.append('cxnName')
            showIndent(outfile, level)
            outfile.write('cxnName = "%s",\n' % (self.cxnName,))
        if self.ID is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            showIndent(outfile, level)
            outfile.write('ID = %s,\n' % (self.ID,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('layer=[\n')
        level += 1
        for layer_ in self.layer:
            showIndent(outfile, level)
            outfile.write('model_.layerType(\n')
            layer_.exportLiteral(outfile, level, name_='layerType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('status')
        if value is not None and 'status' not in already_processed:
            already_processed.append('status')
            self.status = value
        value = attrs.get('cxnID')
        if value is not None and 'cxnID' not in already_processed:
            already_processed.append('cxnID')
            self.cxnID = value
        value = attrs.get('luID')
        if value is not None and 'luID' not in already_processed:
            already_processed.append('luID')
            self.luID = value
        value = attrs.get('frameID')
        if value is not None and 'frameID' not in already_processed:
            already_processed.append('frameID')
            self.frameID = value
        value = attrs.get('cDate')
        if value is not None and 'cDate' not in already_processed:
            already_processed.append('cDate')
            self.cDate = value
        value = attrs.get('frameName')
        if value is not None and 'frameName' not in already_processed:
            already_processed.append('frameName')
            self.frameName = value
        value = attrs.get('luName')
        if value is not None and 'luName' not in already_processed:
            already_processed.append('luName')
            self.luName = value
        value = attrs.get('cxnName')
        if value is not None and 'cxnName' not in already_processed:
            already_processed.append('cxnName')
            self.cxnName = value
        value = attrs.get('ID')
        if value is not None and 'ID' not in already_processed:
            already_processed.append('ID')
            self.ID = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'layer': 
            obj_ = layerType.factory()
            obj_.build(child_)
            self.layer.append(obj_)
# end class annotationSetType


class layerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, rank=None, label=None):
        self.name = _cast(None, name)
        self.rank = _cast(None, rank)
        if label is None:
            self.label = []
        else:
            self.label = label
    def factory(*args_, **kwargs_):
        if layerType.subclass:
            return layerType.subclass(*args_, **kwargs_)
        else:
            return layerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def add_label(self, value): self.label.append(value)
    def insert_label(self, index, value): self.label[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_rank(self): return self.rank
    def set_rank(self, rank): self.rank = rank
    def export(self, outfile, level, namespace_='fn:', name_='layerType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='layerType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='layerType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.rank is not None and 'rank' not in already_processed:
            already_processed.append('rank')
            outfile.write(' rank=%s' % (quote_attrib(self.rank), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='layerType', fromsubclass_=False):
        for label_ in self.label:
            label_.export(outfile, level, namespace_, name_='label')
    def hasContent_(self):
        if (
            self.label
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='layerType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.rank is not None and 'rank' not in already_processed:
            already_processed.append('rank')
            showIndent(outfile, level)
            outfile.write('rank = %s,\n' % (self.rank,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('label=[\n')
        level += 1
        for label_ in self.label:
            showIndent(outfile, level)
            outfile.write('model_.labelType(\n')
            label_.exportLiteral(outfile, level, name_='labelType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('rank')
        if value is not None and 'rank' not in already_processed:
            already_processed.append('rank')
            self.rank = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'label': 
            obj_ = labelType.factory()
            obj_.build(child_)
            self.label.append(obj_)
# end class layerType


class labelType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, itype=None, name=None, bgColor=None, feID=None, start=None, end=None, cBy=None, fgColor=None, valueOf_=None):
        self.itype = _cast(None, itype)
        self.name = _cast(None, name)
        self.bgColor = _cast(None, bgColor)
        self.feID = _cast(int, feID)
        self.start = _cast(None, start)
        self.end = _cast(None, end)
        self.cBy = _cast(None, cBy)
        self.fgColor = _cast(None, fgColor)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if labelType.subclass:
            return labelType.subclass(*args_, **kwargs_)
        else:
            return labelType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_itype(self): return self.itype
    def set_itype(self, itype): self.itype = itype
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_bgColor(self): return self.bgColor
    def set_bgColor(self, bgColor): self.bgColor = bgColor
    def get_feID(self): return self.feID
    def set_feID(self, feID): self.feID = feID
    def get_start(self): return self.start
    def set_start(self, start): self.start = start
    def get_end(self): return self.end
    def set_end(self, end): self.end = end
    def get_cBy(self): return self.cBy
    def set_cBy(self, cBy): self.cBy = cBy
    def get_fgColor(self): return self.fgColor
    def set_fgColor(self, fgColor): self.fgColor = fgColor
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='fn:', name_='labelType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        self.exportAttributes(outfile, level, [], namespace_, name_='labelType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.valueOf_)
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='fn:', name_='labelType'):
        if self.itype is not None and 'itype' not in already_processed:
            already_processed.append('itype')
            outfile.write(' itype=%s' % (self.gds_format_string(quote_attrib(self.itype).encode(ExternalEncoding), input_name='itype'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            outfile.write(' bgColor=%s' % (quote_attrib(self.bgColor), ))
        if self.feID is not None and 'feID' not in already_processed:
            already_processed.append('feID')
            outfile.write(' feID="%s"' % self.gds_format_integer(self.feID, input_name='feID'))
        if self.start is not None and 'start' not in already_processed:
            already_processed.append('start')
            outfile.write(' start=%s' % (quote_attrib(self.start), ))
        if self.end is not None and 'end' not in already_processed:
            already_processed.append('end')
            outfile.write(' end=%s' % (quote_attrib(self.end), ))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            outfile.write(' cBy=%s' % (self.gds_format_string(quote_attrib(self.cBy).encode(ExternalEncoding), input_name='cBy'), ))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            outfile.write(' fgColor=%s' % (quote_attrib(self.fgColor), ))
    def exportChildren(self, outfile, level, namespace_='fn:', name_='labelType', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='labelType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.itype is not None and 'itype' not in already_processed:
            already_processed.append('itype')
            showIndent(outfile, level)
            outfile.write('itype = "%s",\n' % (self.itype,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.bgColor is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            showIndent(outfile, level)
            outfile.write('bgColor = %s,\n' % (self.bgColor,))
        if self.feID is not None and 'feID' not in already_processed:
            already_processed.append('feID')
            showIndent(outfile, level)
            outfile.write('feID = %d,\n' % (self.feID,))
        if self.start is not None and 'start' not in already_processed:
            already_processed.append('start')
            showIndent(outfile, level)
            outfile.write('start = %s,\n' % (self.start,))
        if self.end is not None and 'end' not in already_processed:
            already_processed.append('end')
            showIndent(outfile, level)
            outfile.write('end = %s,\n' % (self.end,))
        if self.cBy is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            showIndent(outfile, level)
            outfile.write('cBy = "%s",\n' % (self.cBy,))
        if self.fgColor is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            showIndent(outfile, level)
            outfile.write('fgColor = %s,\n' % (self.fgColor,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = attrs.get('itype')
        if value is not None and 'itype' not in already_processed:
            already_processed.append('itype')
            self.itype = value
        value = attrs.get('name')
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = attrs.get('bgColor')
        if value is not None and 'bgColor' not in already_processed:
            already_processed.append('bgColor')
            self.bgColor = value
        value = attrs.get('feID')
        if value is not None and 'feID' not in already_processed:
            already_processed.append('feID')
            try:
                self.feID = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = attrs.get('start')
        if value is not None and 'start' not in already_processed:
            already_processed.append('start')
            self.start = value
        value = attrs.get('end')
        if value is not None and 'end' not in already_processed:
            already_processed.append('end')
            self.end = value
        value = attrs.get('cBy')
        if value is not None and 'cBy' not in already_processed:
            already_processed.append('cBy')
            self.cBy = value
        value = attrs.get('fgColor')
        if value is not None and 'fgColor' not in already_processed:
            already_processed.append('fgColor')
            self.fgColor = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class labelType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fullTextAnnotation'
        rootClass = fullTextAnnotation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fullTextAnnotation'
        rootClass = fullTextAnnotation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="fullTextAnnotation",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'fullTextAnnotation'
        rootClass = fullTextAnnotation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from fulltext import *\n\n')
    sys.stdout.write('import fulltext as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "FE",
    "annotationSetType",
    "corpDocType",
    "document",
    "frame",
    "fullTextAnnotation",
    "headerType",
    "labelType",
    "layerType",
    "lexemeType",
    "semTypeRefType",
    "sentenceType"
    ]
